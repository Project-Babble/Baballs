#!/bin/bash

# Configure script for Babble Gaze Eye Tracking
# Supports macOS and Linux

set -e

# Default values
PREFIX="/usr/local"
BUILD_TYPE="Release"
ENABLE_TRAINER=1
ENABLE_OVERLAY=1
PYTHON_EXECUTABLE=""

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Function to print colored output
print_status() {
    echo -e "${GREEN}[INFO]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Function to show help
show_help() {
    cat << EOF
Usage: $0 [OPTIONS]

Configure script for Babble Gaze Eye Tracking

OPTIONS:
  --prefix=PATH         Installation prefix (default: /usr/local)
  --build-type=TYPE     Build type: Debug or Release (default: Release)
  --disable-trainer     Disable trainer build
  --disable-overlay     Disable overlay build
  --python=PATH         Path to Python executable (for trainer dependencies)
  --help               Show this help message

ENVIRONMENT VARIABLES:
  CC                   C compiler
  CXX                  C++ compiler
  CFLAGS              C compiler flags
  CXXFLAGS            C++ compiler flags
  LDFLAGS             Linker flags
  PKG_CONFIG_PATH     pkg-config search path

Examples:
  $0                                    # Basic configuration
  $0 --prefix=/opt/babble              # Custom installation prefix
  $0 --build-type=Debug                # Debug build
  $0 --disable-trainer                 # Only build overlay
  $0 --python=/usr/bin/python3.9      # Specific Python version

EOF
}

# Parse command line arguments
while [[ $# -gt 0 ]]; do
    case $1 in
        --prefix=*)
            PREFIX="${1#*=}"
            shift
            ;;
        --build-type=*)
            BUILD_TYPE="${1#*=}"
            shift
            ;;
        --disable-trainer)
            ENABLE_TRAINER=0
            shift
            ;;
        --disable-overlay)
            ENABLE_OVERLAY=0
            shift
            ;;
        --python=*)
            PYTHON_EXECUTABLE="${1#*=}"
            shift
            ;;
        --help)
            show_help
            exit 0
            ;;
        *)
            print_error "Unknown option: $1"
            show_help
            exit 1
            ;;
    esac
done

# Detect OS
OS=$(uname -s)
ARCH=$(uname -m)

print_status "Configuring Babble Gaze Eye Tracking for $OS ($ARCH)"
print_status "Build type: $BUILD_TYPE"
print_status "Installation prefix: $PREFIX"

# Check for required tools
check_tool() {
    if ! command -v $1 &> /dev/null; then
        print_error "$1 is required but not found"
        return 1
    fi
    print_status "Found $1: $(command -v $1)"
}

print_status "Checking for required tools..."
check_tool pkg-config || exit 1

# Set compiler defaults if not set
if [[ -z "$CC" ]]; then
    if [[ "$OS" == "Darwin" ]]; then
        CC="clang"
    else
        CC="gcc"
    fi
fi

if [[ -z "$CXX" ]]; then
    if [[ "$OS" == "Darwin" ]]; then
        CXX="clang++"
    else
        CXX="g++"
    fi
fi

check_tool $CC || exit 1
check_tool $CXX || exit 1

# Check for Python if trainer is enabled
if [[ $ENABLE_TRAINER -eq 1 ]]; then
    if [[ -z "$PYTHON_EXECUTABLE" ]]; then
        # Try to find Python
        for python_cmd in python3 python python3.9 python3.8 python3.10 python3.11; do
            if command -v $python_cmd &> /dev/null; then
                PYTHON_EXECUTABLE=$python_cmd
                break
            fi
        done
    fi
    
    if [[ -z "$PYTHON_EXECUTABLE" ]]; then
        print_error "Python is required for trainer but not found"
        exit 1
    fi
    
    print_status "Found Python: $PYTHON_EXECUTABLE"
    PYTHON_VERSION=$($PYTHON_EXECUTABLE --version 2>&1 | cut -d' ' -f2)
    print_status "Python version: $PYTHON_VERSION"
fi

# Function to check for library
check_library() {
    local lib_name=$1
    local pkg_name=$2
    local header_path=$3
    
    print_status "Checking for $lib_name..."
    
    # Try pkg-config first
    if pkg-config --exists $pkg_name 2>/dev/null; then
        print_status "Found $lib_name via pkg-config"
        return 0
    fi
    
    # Try to find header manually
    for path in /usr/include /usr/local/include /opt/homebrew/include /opt/local/include; do
        if [[ -f "$path/$header_path" ]]; then
            print_status "Found $lib_name headers in $path"
            return 0
        fi
    done
    
    print_error "$lib_name not found"
    return 1
}

# Check for required libraries
MISSING_LIBS=0

if [[ $ENABLE_OVERLAY -eq 1 ]]; then
    print_status "Checking overlay dependencies..."
    
    # Check for OpenVR
    if ! check_library "OpenVR" "openvr" "openvr.h"; then
        print_error "OpenVR is required for overlay"
        MISSING_LIBS=1
    fi
    
    # Check for TurboJPEG
    if ! check_library "TurboJPEG" "libturbojpeg" "turbojpeg.h"; then
        print_error "TurboJPEG is required for overlay"
        MISSING_LIBS=1
    fi
fi

if [[ $ENABLE_TRAINER -eq 1 ]]; then
    print_status "Checking trainer dependencies..."
    
    # Check for ONNX Runtime
    if ! check_library "ONNX Runtime" "libonnxruntime" "onnxruntime_cxx_api.h"; then
        print_error "ONNX Runtime is required for trainer"
        MISSING_LIBS=1
    fi
fi

if [[ $MISSING_LIBS -eq 1 ]]; then
    print_error "Missing required dependencies. Please install them and run configure again."
    print_error "See README.md for installation instructions."
    exit 1
fi

# Create build directory
mkdir -p build

# Generate Makefile
print_status "Generating Makefile..."

cat > Makefile << EOF
# Generated Makefile for Babble Gaze Eye Tracking
# OS: $OS
# Architecture: $ARCH

# Configuration
PREFIX = $PREFIX
BUILD_TYPE = $BUILD_TYPE
CC = $CC
CXX = $CXX
PYTHON = $PYTHON_EXECUTABLE

# Build flags
ifeq (\$(BUILD_TYPE),Debug)
    CFLAGS = -g -O0 -DDEBUG
    CXXFLAGS = -g -O0 -DDEBUG -std=c++14
else
    CFLAGS = -O3 -DNDEBUG
    CXXFLAGS = -O3 -DNDEBUG -std=c++14
endif

# Add user flags
CFLAGS += \$(EXTRA_CFLAGS)
CXXFLAGS += \$(EXTRA_CXXFLAGS)
LDFLAGS += \$(EXTRA_LDFLAGS)

# Platform-specific settings
ifeq (\$(shell uname -s),Darwin)
    # macOS
    CFLAGS += -I/opt/homebrew/include -I/usr/local/include
    CXXFLAGS += -I/opt/homebrew/include -I/usr/local/include
    LDFLAGS += -L/opt/homebrew/lib -L/usr/local/lib
    SHARED_EXT = .dylib
    RPATH_FLAG = -rpath
else
    # Linux
    CFLAGS += -fPIC
    CXXFLAGS += -fPIC
    SHARED_EXT = .so
    RPATH_FLAG = -rpath
endif

# Include directories
INCLUDES = -I. -I./build

# Library detection
EOF

# Add library detection to Makefile
if [[ $ENABLE_OVERLAY -eq 1 ]]; then
    cat >> Makefile << 'EOF'

# OpenVR
OPENVR_CFLAGS := $(shell pkg-config --cflags openvr 2>/dev/null || echo "-I/usr/local/include -I/opt/homebrew/include")
OPENVR_LIBS := $(shell pkg-config --libs openvr 2>/dev/null || echo "-lopenvr_api")

# TurboJPEG  
TURBOJPEG_CFLAGS := $(shell pkg-config --cflags libturbojpeg 2>/dev/null || echo "-I/usr/local/include -I/opt/homebrew/include")
TURBOJPEG_LIBS := $(shell pkg-config --libs libturbojpeg 2>/dev/null || echo "-lturbojpeg")

OVERLAY_CFLAGS = $(OPENVR_CFLAGS) $(TURBOJPEG_CFLAGS)
OVERLAY_LIBS = $(OPENVR_LIBS) $(TURBOJPEG_LIBS)
EOF
fi

if [[ $ENABLE_TRAINER -eq 1 ]]; then
    cat >> Makefile << 'EOF'

# ONNX Runtime
ONNX_CFLAGS := $(shell pkg-config --cflags libonnxruntime 2>/dev/null || echo "-I/usr/local/include -I/opt/homebrew/include")
ONNX_LIBS := $(shell pkg-config --libs libonnxruntime 2>/dev/null || echo "-lonnxruntime")

TRAINER_CFLAGS = $(ONNX_CFLAGS)
TRAINER_LIBS = $(ONNX_LIBS)
EOF
fi

# Add build rules
cat >> Makefile << EOF

# Source files
COMMON_SOURCES = math_utils.cpp capture_reader.cpp numpy_io.cpp
OVERLAY_SOURCES = main.cpp overlay_manager.cpp dashboard_ui.cpp frame_buffer.cpp routine.cpp rest_server.cpp subprocess.cpp trainer_wrapper.cpp jpeg_stream.c
TRAINER_SOURCES = trainer.cpp

# Object files
COMMON_OBJECTS = \$(COMMON_SOURCES:.cpp=.o) \$(COMMON_SOURCES:.c=.o)
OVERLAY_OBJECTS = \$(OVERLAY_SOURCES:.cpp=.o) \$(OVERLAY_SOURCES:.c=.o)
TRAINER_OBJECTS = \$(TRAINER_SOURCES:.cpp=.o)

# Build directory
BUILD_DIR = build

# Targets
TARGETS =
EOF

if [[ $ENABLE_OVERLAY -eq 1 ]]; then
    cat >> Makefile << 'EOF'
TARGETS += gaze_overlay
EOF
fi

if [[ $ENABLE_TRAINER -eq 1 ]]; then
    cat >> Makefile << 'EOF'
TARGETS += trainer
EOF
fi

cat >> Makefile << 'EOF'

.PHONY: all clean install uninstall

all: $(TARGETS)

# Pattern rules
%.o: %.cpp
	@echo "Compiling $<..."
	@$(CXX) $(CXXFLAGS) $(INCLUDES) -c $< -o $@

%.o: %.c
	@echo "Compiling $<..."
	@$(CC) $(CFLAGS) $(INCLUDES) -c $< -o $@

EOF

if [[ $ENABLE_OVERLAY -eq 1 ]]; then
    cat >> Makefile << 'EOF'
# Overlay target
gaze_overlay: $(COMMON_OBJECTS) $(OVERLAY_OBJECTS)
	@echo "Linking gaze_overlay..."
	@$(CXX) $(CXXFLAGS) $(LDFLAGS) -o $@ $^ $(OVERLAY_LIBS) $(OVERLAY_CFLAGS)

$(OVERLAY_OBJECTS): CXXFLAGS += $(OVERLAY_CFLAGS)
jpeg_stream.o: CFLAGS += $(OVERLAY_CFLAGS)

EOF
fi

if [[ $ENABLE_TRAINER -eq 1 ]]; then
    cat >> Makefile << 'EOF'
# Trainer target
trainer: $(COMMON_OBJECTS) $(TRAINER_OBJECTS)
	@echo "Linking trainer..."
	@$(CXX) $(CXXFLAGS) $(LDFLAGS) -o $@ $^ $(TRAINER_LIBS) $(TRAINER_CFLAGS)

$(TRAINER_OBJECTS): CXXFLAGS += $(TRAINER_CFLAGS)

# Python model generation
model:
	@echo "Generating ONNX model..."
	@$(PYTHON) mkmodel7.py

EOF
fi

cat >> Makefile << 'EOF'
# Clean target
clean:
	@echo "Cleaning..."
	@rm -f *.o $(TARGETS)
	@rm -rf $(BUILD_DIR)

# Install target
install: $(TARGETS)
	@echo "Installing to $(PREFIX)..."
	@mkdir -p $(PREFIX)/bin
EOF

if [[ $ENABLE_OVERLAY -eq 1 ]]; then
    cat >> Makefile << 'EOF'
	@cp gaze_overlay $(PREFIX)/bin/
EOF
fi

if [[ $ENABLE_TRAINER -eq 1 ]]; then
    cat >> Makefile << 'EOF'
	@cp trainer $(PREFIX)/bin/
EOF
fi

cat >> Makefile << 'EOF'

# Uninstall target
uninstall:
	@echo "Uninstalling from $(PREFIX)..."
EOF

if [[ $ENABLE_OVERLAY -eq 1 ]]; then
    cat >> Makefile << 'EOF'
	@rm -f $(PREFIX)/bin/gaze_overlay
EOF
fi

if [[ $ENABLE_TRAINER -eq 1 ]]; then
    cat >> Makefile << 'EOF'
	@rm -f $(PREFIX)/bin/trainer
EOF
fi

cat >> Makefile << 'EOF'

# Help target
help:
	@echo "Available targets:"
	@echo "  all       - Build all enabled targets"
	@echo "  clean     - Remove build artifacts"
	@echo "  install   - Install to $(PREFIX)"
	@echo "  uninstall - Remove from $(PREFIX)"
EOF

if [[ $ENABLE_TRAINER -eq 1 ]]; then
    cat >> Makefile << 'EOF'
	@echo "  model     - Generate ONNX model using Python"
EOF
fi

cat >> Makefile << 'EOF'
	@echo "  help      - Show this help"
EOF

# Create config.h
print_status "Generating config.h..."

cat > config.h << EOF
/* Generated configuration header */
#ifndef CONFIG_H
#define CONFIG_H

#define BUILD_TYPE "$BUILD_TYPE"
#define PREFIX "$PREFIX"

#ifdef __APPLE__
#define PLATFORM_MACOS 1
#elif __linux__
#define PLATFORM_LINUX 1
#endif

EOF

if [[ $ENABLE_OVERLAY -eq 1 ]]; then
    echo "#define ENABLE_OVERLAY 1" >> config.h
else
    echo "#define ENABLE_OVERLAY 0" >> config.h
fi

if [[ $ENABLE_TRAINER -eq 1 ]]; then
    echo "#define ENABLE_TRAINER 1" >> config.h
else
    echo "#define ENABLE_TRAINER 0" >> config.h
fi

cat >> config.h << 'EOF'

#endif /* CONFIG_H */
EOF

print_status "Configuration complete!"
print_status ""
print_status "To build the project, run:"
print_status "  make"
print_status ""
print_status "To install, run:"
print_status "  make install"
print_status ""

if [[ $ENABLE_TRAINER -eq 1 ]]; then
    print_status "To generate the ONNX model, run:"
    print_status "  make model"
    print_status ""
fi

print_status "Configuration summary:"
print_status "  OS: $OS"
print_status "  Architecture: $ARCH"
print_status "  Build type: $BUILD_TYPE"
print_status "  Prefix: $PREFIX"
print_status "  Overlay: $([ $ENABLE_OVERLAY -eq 1 ] && echo "enabled" || echo "disabled")"
print_status "  Trainer: $([ $ENABLE_TRAINER -eq 1 ] && echo "enabled" || echo "disabled")"
print_status "  C Compiler: $CC"
print_status "  C++ Compiler: $CXX"
if [[ $ENABLE_TRAINER -eq 1 ]]; then
    print_status "  Python: $PYTHON_EXECUTABLE"
fi